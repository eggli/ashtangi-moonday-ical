{"version":3,"sources":["lune/lune.js","lune/julian.js","App.js","registerServiceWorker.js","index.js"],"names":["julian","require","NEW","FIRST","FULL","LAST","PHASE_MASK","EPOCH","ECLIPTIC_LONGITUDE_EPOCH","ECLIPTIC_LONGITUDE_PERIGEE","ECCENTRICITY","SUN_SMAXIS","SUN_ANGULAR_SIZE_SMAXIS","MOON_MEAN_LONGITUDE_EPOCH","MOON_MEAN_PERIGEE_EPOCH","MOON_ECCENTRICITY","MOON_SMAXIS","MOON_ANGULAR_SIZE_SMAXIS","SYNODIC_MONTH","torad","d","Math","PI","dsin","sin","dcos","cos","meanphase","sdate","k","t","truephase","tphase","pt","m","mprime","f","toDate","exports","PHASE_NEW","PHASE_FIRST","PHASE_FULL","PHASE_LAST","phase","phase_date","Date","r","a","day","fromDate","sun_mean_anomaly","sun_true_anomaly","atan","sqrt","tan","ecc","e","delta","abs","kepler","sun_ecliptic_longitude","sun_orbital_distance_factor","moon_mean_longitude","moon_mean_anomaly","moon_evection","moon_annual_equation","moon_mp","moon_equation_center_correction","moon_corrected_longitude","moon_age","floor","moon_distance","illuminated","age","distance","angular_diameter","sun_distance","sun_angular_diameter","phase_hunt","adate","getTime","k1","getFullYear","getMonth","nt1","k2","nt2","new_date","q1_date","full_date","q3_date","nextnew_date","phase_range","start","end","date","list","push","practiceTimes","Object","toConsumableArray","Array","keys","map","key","value","floored","String","padStart","AVOIDANCE_OPTIONS","+1","label","getEventTime","peakTime","moment","add","-1","subtract","","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInputChange","event","target","type","checked","name","setState","defineProperty","getMoonPhases","phaseType","now","upTo","state","upToYear","lune","getFullMoons","time","getNewMoons","getMoondays","fullMoondays","newMoondays","concat","sort","b","getAvoidanceOptions","practiceTime","year","Number","month","previousPracticeTime","nextPracticeTime","practiceBeforePeakTime","diff","duration","asHours","option","practiceAtPeakTime","reduce","carry","generateEvents","moondays","cal","ical","domain","timezone","forEach","moonday","avoidanceOptions","isInPeakTime","avoidPeakTime","eventTime","summary","showExactTime","format","createEvent","allDay","description","reminder","createAlarm","trigger","reminderOption","calstr","toString","blob","Blob","url","URL","createObjectURL","FileSaver","saveAs","revokeObjectURL","tz","guess","_this2","displayFormat","react_default","createElement","Jumbotron","Container","Form","Group","controlId","Label","Control","min","max","onChange","Text","className","Check","as","Button","variant","onClick","Table","striped","bordered","responsive","slice","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","confirm","reload","catch","error","ReactDOM","render","src_App","document","getElementById","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.93a775f3.chunk.js","sourcesContent":["/**\n * This library calculates the current phase of the moon\n * as well as finds the dates of the recent moon phases.\n *\n * Ported from python version found here:\n * https://bazaar.launchpad.net/~keturn/py-moon-phase/trunk/annotate/head:/moon.py\n *\n * Author: Ryan Seys (https://github.com/ryanseys)\n */\n\nconst julian = require('./julian');\n\n// Phases of the moon & precision\nconst NEW = 0;\nconst FIRST = 1;\nconst FULL = 2;\nconst LAST = 3;\nconst PHASE_MASK = 3;\n\n// Astronomical Constants\n// JDN stands for Julian Day Number\n// Angles here are in degrees\n// 1980 January 0.0 in JDN\n// XXX: DateTime(1980).jdn yields 2444239.5 -- which one is right?\n// XXX: even though 2444239.5 is correct for the 1 Jan 1980, 2444238.5 gives\n// better accuracy results... possibly somebody chose all of the below\n// constants based on the wrong epoch?\nconst EPOCH = 2444238.5;\n\n// Ecliptic longitude of the Sun at epoch 1980.0\nconst ECLIPTIC_LONGITUDE_EPOCH = 278.83354;\n\n// Ecliptic longitude of the Sun at perigee\nconst ECLIPTIC_LONGITUDE_PERIGEE = 282.596403;\n\n// Eccentricity of Earth's orbit\nconst ECCENTRICITY = 0.016718;\n\n// Semi-major axis of Earth's orbit, in kilometers\nconst SUN_SMAXIS = 1.49585e8;\n\n// Sun's angular size, in degrees, at semi-major axis distance\nconst SUN_ANGULAR_SIZE_SMAXIS = 0.533128;\n\n// Elements of the Moon's orbit, epoch 1980.0\n// Moon's mean longitude at the epoch\nconst MOON_MEAN_LONGITUDE_EPOCH = 64.975464;\n\n// Mean longitude of the perigee at the epoch\nconst MOON_MEAN_PERIGEE_EPOCH = 349.383063;\n\n// Eccentricity of the Moon's orbit\nconst MOON_ECCENTRICITY = 0.0549;\n\n// Semi-major axis of the Moon's orbit, in kilometers\nconst MOON_SMAXIS = 384401.0;\n\n// MOON_SMAXIS premultiplied by the angular size of the Moon from the Earth\nconst MOON_ANGULAR_SIZE_SMAXIS = MOON_SMAXIS * 0.5181;\n\n// Synodic month (new Moon to new Moon), in days\nconst SYNODIC_MONTH = 29.53058868;\n\nfunction fixangle(a) {\n  return a - 360.0 * Math.floor(a / 360.0);\n}\n\n/**\n * Convert degrees to radians\n * @param  {Number} d Angle in degrees\n * @return {Number}   Angle in radians\n */\nfunction torad(d) {\n  return (Math.PI / 180.0) * d;\n}\n\n/**\n * Convert radians to degrees\n * @param  {Number} r Angle in radians\n * @return {Number}   Angle in degrees\n */\nfunction todeg(r) {\n  return (180.0 / Math.PI) * r;\n}\n\nfunction dsin(d) {\n  return Math.sin(torad(d));\n}\n\nfunction dcos(d) {\n  return Math.cos(torad(d));\n}\n\n/**\n * Solve the equation of Kepler.\n */\nfunction kepler(m, ecc) {\n  const epsilon = 1e-6;\n\n  m = torad(m);\n  let e = m;\n  while (1) {\n    const delta = e - ecc * Math.sin(e) - m;\n    e -= delta / (1.0 - ecc * Math.cos(e));\n\n    if (Math.abs(delta) <= epsilon) {\n      break;\n    }\n  }\n\n  return e;\n}\n\n/**\n * Finds the phase information for specific date.\n * @param  {Date} phase_date Date to get phase information of.\n * @return {Object}          Phase data\n */\nfunction phase(phase_date) {\n  if (!phase_date) {\n    phase_date = new Date();\n  }\n  phase_date = julian.fromDate(phase_date);\n\n  const day = phase_date - EPOCH;\n\n  // calculate sun position\n  const sun_mean_anomaly =\n    (360.0 / 365.2422) * day +\n    (ECLIPTIC_LONGITUDE_EPOCH - ECLIPTIC_LONGITUDE_PERIGEE);\n  const sun_true_anomaly =\n    2 *\n    todeg(\n      Math.atan(\n        Math.sqrt((1.0 + ECCENTRICITY) / (1.0 - ECCENTRICITY)) *\n          Math.tan(0.5 * kepler(sun_mean_anomaly, ECCENTRICITY))\n      )\n    );\n  const sun_ecliptic_longitude = ECLIPTIC_LONGITUDE_PERIGEE + sun_true_anomaly;\n  const sun_orbital_distance_factor =\n    (1 + ECCENTRICITY * dcos(sun_true_anomaly)) /\n    (1 - ECCENTRICITY * ECCENTRICITY);\n\n  // calculate moon position\n  const moon_mean_longitude = MOON_MEAN_LONGITUDE_EPOCH + 13.1763966 * day;\n  const moon_mean_anomaly =\n    moon_mean_longitude - 0.1114041 * day - MOON_MEAN_PERIGEE_EPOCH;\n  const moon_evection =\n    1.2739 *\n    dsin(\n      2 * (moon_mean_longitude - sun_ecliptic_longitude) - moon_mean_anomaly\n    );\n  const moon_annual_equation = 0.1858 * dsin(sun_mean_anomaly);\n  // XXX: what is the proper name for this value?\n  const moon_mp =\n    moon_mean_anomaly +\n    moon_evection -\n    moon_annual_equation -\n    0.37 * dsin(sun_mean_anomaly);\n  const moon_equation_center_correction = 6.2886 * dsin(moon_mp);\n  const moon_corrected_longitude =\n    moon_mean_longitude +\n    moon_evection +\n    moon_equation_center_correction -\n    moon_annual_equation +\n    0.214 * dsin(2.0 * moon_mp);\n  const moon_age = fixangle(\n    moon_corrected_longitude -\n      sun_ecliptic_longitude +\n      0.6583 * dsin(2 * (moon_corrected_longitude - sun_ecliptic_longitude))\n  );\n  const moon_distance =\n    (MOON_SMAXIS * (1.0 - MOON_ECCENTRICITY * MOON_ECCENTRICITY)) /\n    (1.0 + MOON_ECCENTRICITY * dcos(moon_mp + moon_equation_center_correction));\n\n  return {\n    phase: (1.0 / 360.0) * moon_age,\n    illuminated: 0.5 * (1.0 - dcos(moon_age)),\n    age: (SYNODIC_MONTH / 360.0) * moon_age,\n    distance: moon_distance,\n    angular_diameter: MOON_ANGULAR_SIZE_SMAXIS / moon_distance,\n    sun_distance: SUN_SMAXIS / sun_orbital_distance_factor,\n    sun_angular_diameter: SUN_ANGULAR_SIZE_SMAXIS * sun_orbital_distance_factor\n  };\n}\n\n/**\n * Calculates time of the mean new Moon for a given base date.\n * This argument K to this function is the precomputed synodic month\n * index, given by:\n *   K = (year - 1900) * 12.3685\n * where year is expressed as a year and fractional year.\n * @param  {Date} sdate   Start date\n * @param  {[type]} k     [description]\n * @return {[type]}       [description]\n */\nfunction meanphase(sdate, k) {\n  // Time in Julian centuries from 1900 January 12 noon UTC\n  const delta_t = (sdate - -2208945600000.0) / 86400000.0;\n  const t = delta_t / 36525;\n  return (\n    2415020.75933 +\n    SYNODIC_MONTH * k +\n    (0.0001178 - 0.000000155 * t) * t * t +\n    0.00033 * dsin(166.56 + (132.87 - 0.009173 * t) * t)\n  );\n}\n\n/**\n * Given a K value used to determine the mean phase of the new moon, and a\n * phase selector (0, 1, 2, 3), obtain the true, corrected phase time.\n * @param  {[type]} k      [description]\n * @param  {[type]} tphase [description]\n * @return {[type]}        [description]\n */\nfunction truephase(k, tphase) {\n  // restrict tphase to (0, 1, 2, 3)\n  tphase = tphase & PHASE_MASK;\n\n  // add phase to new moon time\n  k = k + 0.25 * tphase;\n\n  // Time in Julian centuries from 1900 January 0.5\n  const t = (1.0 / 1236.85) * k;\n\n  // Mean time of phase\n  let pt =\n    2415020.75933 +\n    SYNODIC_MONTH * k +\n    (0.0001178 - 0.000000155 * t) * t * t +\n    0.00033 * dsin(166.56 + (132.87 - 0.009173 * t) * t);\n\n  // Sun's mean anomaly\n  const m = 359.2242 + 29.10535608 * k - (0.0000333 - 0.00000347 * t) * t * t;\n\n  // Moon's mean anomaly\n  const mprime =\n    306.0253 + 385.81691806 * k + (0.0107306 + 0.00001236 * t) * t * t;\n\n  // Moon's argument of latitude\n  const f = 21.2964 + 390.67050646 * k - (0.0016528 - 0.00000239 * t) * t * t;\n\n  // use different correction equations depending on the phase being sought\n  switch (tphase) {\n    // new and full moon use one correction\n    case NEW:\n    case FULL:\n      pt +=\n        (0.1734 - 0.000393 * t) * dsin(m) +\n        0.0021 * dsin(2 * m) -\n        0.4068 * dsin(mprime) +\n        0.0161 * dsin(2 * mprime) -\n        0.0004 * dsin(3 * mprime) +\n        0.0104 * dsin(2 * f) -\n        0.0051 * dsin(m + mprime) -\n        0.0074 * dsin(m - mprime) +\n        0.0004 * dsin(2 * f + m) -\n        0.0004 * dsin(2 * f - m) -\n        0.0006 * dsin(2 * f + mprime) +\n        0.001 * dsin(2 * f - mprime) +\n        0.0005 * dsin(m + 2 * mprime);\n      break;\n\n    // first and last quarter moon use a different correction\n    case FIRST:\n    case LAST:\n      pt +=\n        (0.1721 - 0.0004 * t) * dsin(m) +\n        0.0021 * dsin(2 * m) -\n        0.628 * dsin(mprime) +\n        0.0089 * dsin(2 * mprime) -\n        0.0004 * dsin(3 * mprime) +\n        0.0079 * dsin(2 * f) -\n        0.0119 * dsin(m + mprime) -\n        0.0047 * dsin(m - mprime) +\n        0.0003 * dsin(2 * f + m) -\n        0.0004 * dsin(2 * f - m) -\n        0.0006 * dsin(2 * f + mprime) +\n        0.0021 * dsin(2 * f - mprime) +\n        0.0003 * dsin(m + 2 * mprime) +\n        0.0004 * dsin(m - 2 * mprime) -\n        0.0003 * dsin(2 * m + mprime);\n\n      // the sign of the last term depends on whether we're looking for a first\n      // or last quarter moon!\n      const sign = tphase < FULL ? +1 : -1;\n      pt += sign * (0.0028 - 0.0004 * dcos(m) + 0.0003 * dcos(mprime));\n\n      break;\n    default:\n      break;\n  }\n\n  return julian.toDate(pt);\n}\n\n/**\n * Find time of phases of the moon which surround the current date.\n * Five phases are found, starting and ending with the new moons\n * which bound the current lunation.\n * @param  {Date} sdate Date to start hunting from (defaults to current date)\n * @return {Object}     Object containing recent past and future phases\n */\nfunction phase_hunt(sdate) {\n  if (!sdate) {\n    sdate = new Date();\n  }\n\n  let adate = new Date(sdate.getTime() - 45 * 86400000); // 45 days prior\n  let k1 = Math.floor(\n    12.3685 * (adate.getFullYear() + (1.0 / 12.0) * adate.getMonth() - 1900)\n  );\n  let nt1 = meanphase(adate.getTime(), k1);\n\n  sdate = julian.fromDate(sdate);\n  adate = nt1 + SYNODIC_MONTH;\n  let k2 = k1 + 1;\n  let nt2 = meanphase(adate, k2);\n  while (nt1 > sdate || sdate >= nt2) {\n    adate += SYNODIC_MONTH;\n    k1++;\n    k2++;\n    nt1 = nt2;\n    nt2 = meanphase(adate, k2);\n  }\n\n  return {\n    new_date: truephase(k1, NEW),\n    q1_date: truephase(k1, FIRST),\n    full_date: truephase(k1, FULL),\n    q3_date: truephase(k1, LAST),\n    nextnew_date: truephase(k2, NEW)\n  };\n}\n\nfunction phase_range(start, end, phase) {\n  start = start.getTime();\n  end = end.getTime();\n\n  let t = start - 45 * 86400000;\n\n  let k;\n  {\n    const d = new Date(t);\n    k = Math.floor(\n      12.3685 * (d.getFullYear() + (1.0 / 12.0) * d.getMonth() - 1900)\n    );\n  }\n\n  let date = truephase(k, phase);\n  // skip every phase before starting date\n  while (date.getTime() < start) {\n    k++;\n    date = truephase(k, phase);\n  }\n  // add every phase before (or on!) ending date to a list, and return it\n  const list = [];\n  while (date.getTime() <= end) {\n    list.push(date);\n    k++;\n    date = truephase(k, phase);\n  }\n  return list;\n}\n\nexports.PHASE_NEW = NEW;\nexports.PHASE_FIRST = FIRST;\nexports.PHASE_FULL = FULL;\nexports.PHASE_LAST = LAST;\nexports.phase = phase;\nexports.phase_hunt = phase_hunt;\nexports.phase_range = phase_range;\n","function fromDate(date) {\n  return date.getTime() / 86400000 + 2440587.5;\n}\n\nfunction toDate(julian) {\n  return new Date((julian - 2440587.5) * 86400000);\n}\n\nexports.fromDate = fromDate;\nexports.toDate = toDate;\n","import React, { Component } from 'react';\nimport lune from './lune/lune';\nimport { Container, Form, Button, Jumbotron, Table } from 'react-bootstrap';\nimport moment from 'moment';\nimport ical from 'ical-generator';\nimport FileSaver from 'file-saver';\n\nconst practiceTimes = [...Array(48).keys()].map(key => {\n  const value = key / 2;\n  const floored = Math.floor(value);\n  const time =\n    String(floored).padStart(2, '0') +\n    ':' +\n    String(60 * (value - floored)).padStart(2, '0');\n  return time;\n});\n\nconst AVOIDANCE_OPTIONS = {\n  '+1': {\n    label: '+',\n    getEventTime: peakTime => moment(peakTime).add(1, 'days')\n  },\n  '-1': {\n    label: '-',\n    getEventTime: peakTime => moment(peakTime).subtract(1, 'days')\n  },\n  '': {\n    label: '',\n    getEventTime: peakTime => moment(peakTime)\n  }\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    // handle the case where we don't detect the browser\n    this.state = {\n      timezone: moment.tz.guess(),\n      avoidPeakTime: true,\n      practiceTime: '06:00',\n      upToYear: String(\n        moment()\n          .add(1, 'Y')\n          .year()\n      ),\n      reminder: false,\n      reminderOption: '1',\n      showExactTime: true\n    };\n  }\n\n  handleInputChange = event => {\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n    this.setState({ [name]: value });\n  };\n\n  getMoonPhases = phaseType => {\n    const now = new Date();\n    // const now = new Date('2018-01-01T00:00:00.000Z');\n    const upTo = new Date(this.state.upToYear + '-12-31T23:59:59.999Z');\n\n    const phaseList = lune.phase_range(now, upTo, phaseType);\n\n    return phaseList;\n  };\n\n  getFullMoons = () => {\n    return this.getMoonPhases(lune.PHASE_FULL).map(time => {\n      return { time, phase: '🌕Full' };\n    });\n  };\n\n  getNewMoons = () => {\n    return this.getMoonPhases(lune.PHASE_NEW).map(time => {\n      return { time, phase: '🌑New' };\n    });\n  };\n\n  getMoondays = () => {\n    const fullMoondays = this.getFullMoons();\n    const newMoondays = this.getNewMoons();\n\n    const moondays = [...fullMoondays, ...newMoondays].sort((a, b) => {\n      if (a.time < b.time) {\n        return -1;\n      }\n      if (a.time > b.time) {\n        return 1;\n      }\n      return 0;\n    });\n    // console.log(moondays)\n    return moondays;\n  };\n\n  getAvoidanceOptions = time => {\n    const peakTime = moment(time);\n    const practiceTime = moment(\n      peakTime.year() +\n        '-' +\n        (Number(peakTime.month()) + 1) +\n        '-' +\n        peakTime.date() +\n        ' ' +\n        this.state.practiceTime,\n      'YYYY-MM-DD HH:mm'\n    );\n    const previousPracticeTime = moment(practiceTime).subtract(24, 'hours');\n    const nextPracticeTime = moment(practiceTime).add(24, 'hours');\n    const practiceBeforePeakTime = {\n      diff: Math.abs(\n        moment.duration(moment(previousPracticeTime).diff(peakTime)).asHours()\n      ),\n      option: AVOIDANCE_OPTIONS['-1']\n    };\n    const practiceAtPeakTime = {\n      diff: Math.abs(\n        moment.duration(moment(practiceTime).diff(peakTime)).asHours()\n      ),\n      option: AVOIDANCE_OPTIONS['']\n    };\n    const practiceAfterPeakTime = {\n      diff: Math.abs(\n        moment.duration(moment(nextPracticeTime).diff(peakTime)).asHours()\n      ),\n      option: AVOIDANCE_OPTIONS['+1']\n    };\n    const options = [\n      practiceBeforePeakTime,\n      practiceAtPeakTime,\n      practiceAfterPeakTime\n    ];\n    // console.log({ peakTime: peakTime.toString(), ...options });\n    const avoidanceOption = options.reduce((carry, option) => {\n      if (carry.diff > option.diff) {\n        return option;\n      }\n      return carry;\n    }, practiceAtPeakTime);\n    return avoidanceOption.option;\n  };\n\n  generateEvents = () => {\n    const moondays = this.getMoondays();\n    const cal = ical({\n      domain: 'eggli.github.io',\n      name: 'Moondays',\n      timezone: this.state.timezone\n    });\n    moondays.forEach(moonday => {\n      const avoidanceOptions = this.getAvoidanceOptions(moonday.time);\n      const isInPeakTime = this.state.avoidPeakTime && avoidanceOptions;\n\n      const label = isInPeakTime ? avoidanceOptions.label : '';\n      const eventTime = isInPeakTime\n        ? avoidanceOptions.getEventTime(moonday.time)\n        : moonday.time;\n\n      const summary =\n        moonday.phase +\n        ' Moon' +\n        label +\n        (this.state.showExactTime\n          ? '@' + moment(eventTime).format('HH:mm:ss')\n          : '');\n\n      const event = cal.createEvent({\n        start: eventTime,\n        allDay: true,\n        summary,\n        description: summary\n      });\n\n      if (this.state.reminder) {\n        event.createAlarm({\n          type: 'display',\n          trigger: moment(eventTime).subtract(\n            Number(this.state.reminderOption),\n            'days'\n          )\n        });\n      }\n    });\n\n    const calstr = cal.toString();\n    const blob = new Blob([calstr], { type: 'text/calendar' });\n    const url = URL.createObjectURL(blob);\n    FileSaver.saveAs(blob, 'moondays.ics');\n    URL.revokeObjectURL(url);\n  };\n\n  render() {\n    const displayFormat = this.state.showExactTime\n      ? 'YYYY/MM/DD HH:mm:ss'\n      : 'YYYY/MM/DD';\n    return (\n      <Jumbotron>\n        <Container>\n          <h1>Ashtanga Moonday Calendar</h1>\n          <p>\n            Namaste Ashtangis, this is a simple tool to generate Moondays as\n            events with optional reminders on your calendar.\n          </p>\n          <h2>Usage</h2>\n          <p>\n            Fill the forms below to create your own moonday calendar events,\n            click the 'Download Moonday Events' button to download desired\n            calendar events file, on mobile devices, it should be imported to\n            your calendar under your permission, on desktop computers, open the\n            downloaded file to import these events to your calendar.\n          </p>\n          <p>\n            <strong>\n              Please open this web page in Safari on iOS devices, otherwise, you\n              may see a blank page after download.\n            </strong>\n          </p>\n\n          <Form>\n            <Form.Group controlId=\"upToYear\">\n              <Form.Label>Generate moonday events up to this year</Form.Label>\n              <Form.Control\n                name=\"upToYear\"\n                type=\"number\"\n                value={this.state.upToYear}\n                min={moment().year()}\n                max={moment().year() + 3}\n                onChange={this.handleInputChange}\n              />\n              <Form.Text className=\"text-muted\">\n                Type&nbsp;\n                {moment().year() + 1}\n                &nbsp; here and you will get moondays up to last day of\n                year&nbsp;\n                {moment().year() + 1}.\n              </Form.Text>\n            </Form.Group>\n            <Form.Group controlId=\"showExactTime\">\n              <Form.Label>Show exact full/new phase peak time</Form.Label>\n              <Form.Check\n                type=\"checkbox\"\n                name=\"showExactTime\"\n                checked={this.state.showExactTime}\n                onChange={this.handleInputChange}\n              />\n            </Form.Group>\n            <Form.Group controlId=\"avoidPeakTime\">\n              <Form.Label>Avoid full/new phase peak time</Form.Label>\n              <Form.Check\n                type=\"checkbox\"\n                name=\"avoidPeakTime\"\n                checked={this.state.avoidPeakTime}\n                onChange={this.handleInputChange}\n              />\n              <Form.Text className=\"text-muted\">\n                By checking this, full/new moon phases that too close to your\n                practice time will be shifted to next day. Moondays that shifted\n                will be marked with a plus sign (+) or a minus sign (-).\n              </Form.Text>\n            </Form.Group>\n            {this.state.avoidPeakTime ? (\n              <Form.Group controlId=\"practiceTime\">\n                <Form.Label>What's your regular practice time?</Form.Label>\n                <Form.Control\n                  as=\"select\"\n                  name=\"practiceTime\"\n                  value={this.state.practiceTime}\n                  onChange={this.handleInputChange}\n                >\n                  {practiceTimes.map(time => {\n                    return <option key={time}>{time}</option>;\n                  })}\n                </Form.Control>\n                <Form.Text className=\"text-muted\">\n                  For example, a full moon peaked at 1st of April, 19:00 and\n                  your practice time is 06:00 in the morning, that moonday will\n                  be shifted to 2nd of April or 31th of March due to it's too\n                  close (within 12 hours) to your practice time.\n                </Form.Text>\n              </Form.Group>\n            ) : null}\n            <Form.Group controlId=\"reminderOptions\">\n              <Form.Label>Reminder Options</Form.Label>\n              <Form.Check\n                type=\"checkbox\"\n                name=\"reminder\"\n                checked={this.state.reminder}\n                onChange={this.handleInputChange}\n              />\n              <Form.Text className=\"text-muted\">\n                By checking this, a reminder will be set into moonday events,\n                a.k.a. Moonday Eve Party Time.\n              </Form.Text>\n            </Form.Group>\n          </Form>\n          {this.state.reminder ? (\n            <Form.Group controlId=\"reminderOption\">\n              <Form.Label>\n                When should you get notified before moonday?\n              </Form.Label>\n              <Form.Control\n                as=\"select\"\n                name=\"reminderOption\"\n                value={this.state.reminderOption}\n                onChange={this.handleInputChange}\n              >\n                <option value={'1'}>One day</option>\n                <option value={'2'}>Two days</option>\n              </Form.Control>\n              <Form.Text className=\"text-muted\">\n                You will be notifed on desired timing, e.g. Two days before\n                Moonday for night activities arrangement.\n              </Form.Text>\n            </Form.Group>\n          ) : null}\n\n          <Button variant=\"primary\" onClick={this.generateEvents}>\n            Download Moonday Events\n          </Button>\n          <p />\n          <h2>Questions? Suggestions?</h2>\n          <p>Contact me: aeggli@gmail.com</p>\n          <h2>Moonday Events Preview</h2>\n          <p>Listing up to 50 moondays.</p>\n          <Table striped bordered responsive>\n            <thead>\n              <tr>\n                <th>Moon Phase</th>\n                <th>Date</th>\n              </tr>\n            </thead>\n            <tbody>\n              {this.getMoondays()\n                .slice(0, 50)\n                .map(moonday => {\n                  const avoidanceOptions = this.getAvoidanceOptions(\n                    moonday.time\n                  );\n                  const isInPeakTime =\n                    this.state.avoidPeakTime && avoidanceOptions;\n\n                  const eventTime = isInPeakTime\n                    ? avoidanceOptions\n                        .getEventTime(moonday.time)\n                        .format(displayFormat)\n                    : moment(moonday.time).format(displayFormat);\n                  return (\n                    <tr key={moonday.time}>\n                      <td>\n                        {moonday.phase}\n                        {isInPeakTime ? avoidanceOptions.label : ''}\n                      </td>\n                      <td>{eventTime}</td>\n                    </tr>\n                  );\n                })}\n            </tbody>\n          </Table>\n        </Container>\n      </Jumbotron>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n              if (window.confirm('New content is available; please refresh.')) {\n                window.location.reload();\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n// import 'bootstrap/dist/css/bootstrap-theme.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}